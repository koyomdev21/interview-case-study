name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      matrix:
        node-version: [ 20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Set up php
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_pgsql, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml
      
      - name: Copy .env
        run: cp .env.example .env

      - name: Install composer dependencies
        run: composer install --optimize-autoloader

      - name: Install dependencies
        run: npm install

      - name: Build assets
        run: npm run build

      - name: Generate app key
        run: php artisan key:generate

      - name: Optimize application
        run: php artisan optimize

      - name: Clear config cache
        run: php artisan config:clear

      - name: Run tests
        run: php artisan test

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}

      - name: Build and push
        id: pushbuild
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # - name: SSH to EC2 instance
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}

      # - name: SCP docker-compose file run: scp -r docker-compose.yml /nginx/conf.d/default.conf ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/ec2-user
